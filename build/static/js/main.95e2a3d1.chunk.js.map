{"version":3,"sources":["components/Cards/styles.js","components/Cards/Cards.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["styles","image","height","width","border","Cards","props","react_default","a","createElement","className","id","src","style","alt","name","onClick","handleClick","Header","currentScore","topScore","href","message","App","state","images","clicked","checkClicked","ids","matchFound","_this","map","shuffleCards","array","Math","random","sort","b","console","log","concat","checkWinLose","lost","_this$state","newScore","length","setState","score","Object","toConsumableArray","_this2","this","components_Cards_Cards","key","components_Header_Header","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+6IAQeA,EARA,CACXC,MAAO,CACHC,OAAQ,OACRC,MAAO,OACPC,OAAQ,sBCkBDC,EAnBD,SAAAC,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,GAAIL,EAAMK,IACtCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OACIG,IAAKN,EAAML,MACXY,MAAOb,EAAOC,MACdS,UAAU,gBACVI,IAAKR,EAAMS,KACXC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMK,OAE3CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBAAjB,IAAoCJ,EAAMS,KAA1C,SCgBDG,EA3BA,SAAAZ,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,6EACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,6BACiBH,EAAMa,aADvB,mBAGYb,EAAMc,UAElBb,EAAAC,EAAAC,cAAA,KAAGY,KAAK,KAAR,oCAOxBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaH,EAAAC,EAAAC,cAAA,YAAOH,EAAMgB,oBC6ErCC,6MA/FXC,MAAQ,CACJC,OAAQA,EACRN,aAAc,EACdC,SAAU,EACVM,QAAS,GACTJ,QAAS,MAIbK,aAAe,SAAAC,GACX,IAAIC,GAAa,EAMjB,OALAC,EAAKN,MAAME,QAAQK,IAAI,SAASpB,GACxBiB,IAAQjB,IACRkB,GAAa,KAGdA,KAGXG,aAAe,SAAAC,GAAK,OAChBA,EAAMF,IAAI,SAAAvB,GAAC,MAAI,CAAC0B,KAAKC,SAAU3B,KAC1B4B,KAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAE,GAAK6B,EAAE,KACxBN,IAAI,SAAAvB,GAAC,OAAIA,EAAE,QAEpBS,YAAc,SAAAN,GAEV,OADA2B,QAAQC,IAAR,OAAAC,OAAmB7B,IACXmB,EAAKH,aAAahB,IACtB,KAAK,EACDmB,EAAKW,cAAa,GAClB,MACJ,KAAK,EACDX,EAAKW,cAAa,EAAO9B,OAOrC8B,aAAe,SAACC,EAAM/B,GAAO,IAAAgC,EACmBb,EAAKN,MAAzCL,EADiBwB,EACjBxB,aAAcC,EADGuB,EACHvB,SAAUM,EADPiB,EACOjB,QAC1BkB,EAAWzB,EACjB,GAAuB,KAAnBO,EAAQmB,OACRf,EAAKgB,SAAS,CACVrB,SACAN,aAAc,EACdC,SAAUwB,EAAWxB,EAAWwB,EAAWxB,EAC3CM,QAAS,GACTJ,QAAS,2CAEV,CACH,IAAMyB,EAAQ5B,EAAe,EAC7BW,EAAKgB,SAAS,CACVpB,QAAO,GAAAc,OAAAQ,OAAAC,EAAA,EAAAD,CAAMtB,GAAN,CAAef,IACtBc,OAAQK,EAAKE,aAAaP,GAC1BN,aAAc4B,EACdzB,QAAS,KAGboB,GACAZ,EAAKgB,SAAS,CACVrB,SACAN,aAAc,EACdC,SAAUwB,EAAWxB,EAAWwB,EAAWxB,EAC3CM,QAAS,GACTJ,QAAS,iHAKX,IAAA4B,EAAAC,KACN,OACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAGXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVyC,KAAK3B,MAAMC,OAAOM,IAAI,SAAA9B,GAAK,OACxBM,EAAAC,EAAAC,cAAC2C,EAAD,CACIC,IAAKpD,EAAMU,GACXV,MAAOA,EAAMA,MACbU,GAAIV,EAAMU,GACVM,YAAaiC,EAAKjC,kBAIlCV,EAAAC,EAAAC,cAAC6C,EAAD,CACInC,aAAcgC,KAAK3B,MAAML,aACzBC,SAAU+B,KAAK3B,MAAMJ,SACrBE,QAAS6B,KAAK3B,MAAMF,kBA1FtBiC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.95e2a3d1.chunk.js","sourcesContent":["const styles = {\n    image: {\n        height: '100%',\n        width: '100%',\n        border: '2px solid #000000'\n    }\n};\n\nexport default styles;","import React from 'react';\nimport styles from './styles';\n\nconst Cards = props => (\n    <div className='col s6 m6 l3'>\n        <div className='card hoverable' id={props.id}>\n            <div className='card-image'>\n                <img\n                    src={props.image}\n                    style={styles.image}\n                    className='character-img'\n                    alt={props.name}\n                    onClick={() => props.handleClick(props.id)}\n                />\n                <div className = 'character-name'> {props.name} </div>\n            </div>\n        </div>\n    </div>\n);\n\n\n\nexport default Cards;","import React from 'react';\n// import styles from './styles'\n\nconst Header = props => (\n    <div className='container-fluid header' >\n        <div className='row center'>\n            <div className='col l8 offset-l2 s10 offset-s1'>\n                <div className='card-horizontal' >\n                    <div className='card-content'>\n                        <h2 className='white-text'>Don't choose the same character twice! Can you reach the top score of 85?</h2>\n                        <div className='row'>\n                            <div className='col s3'>\n                                <h3>\n                                Current Score / {props.currentScore}  ||\n                                \n                                Top Score /{props.topScore}\n                                </h3>\n                                <a href=\".\" >Smash Bros Ultimate Memory</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className='row center'>\n            <h4 className='grey-text' ><span>{props.message}</span></h4>\n        </div>\n    </div >\n);\n\nexport default Header;","import React from 'react';\nimport Cards from './components/Cards/Cards';\nimport Header from './components/Header/Header';\nimport images from './images.json';\n\nclass App extends React.Component {\n\n    state = {\n        images: images,\n        currentScore: 0,\n        topScore: 0,\n        clicked: [],\n        message: ''\n    }\n\n\n    checkClicked = ids => {\n        let matchFound = false;\n        this.state.clicked.map(function(id){\n            if (ids === id) {\n                matchFound = true;\n            }\n        })\n        return matchFound;\n    }\n\n    shuffleCards = array =>\n        array.map(a => [Math.random(), a])\n            .sort((a, b) => a[0] - b[0])\n            .map(a => a[1])\n\n    handleClick = id => {\n        console.log(`id: ${id}`)\n        switch (this.checkClicked(id)) {\n            case true:\n                this.checkWinLose(true);\n                break;\n            case false:\n                this.checkWinLose(false, id);\n                break;\n            default:\n                break;\n        }\n    }\n\n    checkWinLose = (lost, id) => {\n        const { currentScore, topScore, clicked } = this.state\n        const newScore = currentScore;\n        if (clicked.length === 85) {\n            this.setState({\n                images,\n                currentScore: 0,\n                topScore: newScore > topScore ? newScore : topScore,\n                clicked: [],\n                message: 'You Win! Click image to try again.'\n            });\n        } else {\n            const score = currentScore + 1\n            this.setState({\n                clicked: [...clicked, id],\n                images: this.shuffleCards(images),\n                currentScore: score,\n                message: ''\n            });\n        }\n        if (lost) {\n            this.setState({\n                images,\n                currentScore: 0,\n                topScore: newScore > topScore ? newScore : topScore,\n                clicked: [],\n                message: 'You Lose! Click image to try again.'\n            });\n        }\n    }\n\n    render () {\n        return (\n            <div className='container-fluid'>\n             \n               \n                <div className='container'>\n                    <div className='row flow-text'>\n                        {this.state.images.map(image =>\n                            <Cards\n                                key={image.id}\n                                image={image.image}\n                                id={image.id}\n                                handleClick={this.handleClick} />)}\n                    </div>\n                </div>\n                {/* <Nav /> */}\n                <Header\n                    currentScore={this.state.currentScore}\n                    topScore={this.state.topScore}\n                    message={this.state.message} />\n            </div >\n\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}